#!/bin/bash

### DON'T change any variable in here if you are not sure what you are doing.
### ONLY change in the config file

do_setup_variables() {
	clear
	REBOOTMSG="System will now reboot. Start up or ssh into box again and re-run the script. This is normal."
	INTERFACE="tun0" 
	MYUSER=`awk -F'[/:]' '{if ($3 >= 1000 && $3 != 65534) print $1}' /etc/passwd  |head -n1`
	HOMEDIR=$( getent passwd "$MYUSER" | cut -d: -f6 )
	if [[ "$HOMEDIR" = *"root"* ]]; then
	  echo "Run the script as a normal user!"
	  exit 1
	fi
	
##Todo Put some of these in config
	SCRIPTDIR="$HOMEDIR"/scripts
	EXPORTDIR="$HOMEDIR"/exports
	WRKDIR="$HOMEDIR"/working
	mkdir -p "$SCRIPTDIR" "$EXPORTDIR" "$WRKDIR"
	CURDIR=`pwd`
	ETH=`ip -o link show | awk '{print $2,$9}' |grep UP | sed -e 's/:.*//'`
	DELUGE="deluge-1.3.15" 	#Current version at http://download.deluge-torrent.org/source/?C=M;O=D
	PROGRESS="$HOMEDIR""/progress"
	
	[[ -e ${SCRIPTDIR}/config ]] && . ${SCRIPTDIR}/config
	force_set=1 ## set -e exit here without this line https://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin
}

do_check_config() {
	
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi
	
	if test -e ${CURDIR}/theAccountant ; then
		cp ${CURDIR}/theAccountant ${SCRIPTDIR}/theAccountant
	else
		echo "Second part missing. Read the howto again."
		exit 1
	fi 

	if test -e ${SCRIPTDIR}/theAccountant ; then
		chmod +x ${SCRIPTDIR}/theAccountant
		sed -i '7s/^/echo "theAccountant is disabled."\n/' ${SCRIPTDIR}/theAccountant
		sed -i '8s/^/exit 0\n/' ${SCRIPTDIR}/theAccountant
	else
		echo "Second part missing. Read the howto again."
		exit 1
	fi
	
	if test -e ${CURDIR}/config ; then
		cp ${CURDIR}/config ${SCRIPTDIR}/config
		. ${CURDIR}/config
	else
		echo "No config file found. Read the howto again."
		exit 1
	fi

	if test -z ${pia_user}; then
		echo "Basic info needed in config"
		exit 1
	fi

	echo "$pia_user" > "$EXPORTDIR""/PIA.txt"
	echo "$pia_pass" >> "$EXPORTDIR""/PIA.txt"
	sudo chmod 600 "$EXPORTDIR""/PIA.txt"
	
	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
	#echo "$vpn_user" > "$EXPORTDIR""/vpn_user"		
	#chmod 444 "$EXPORTDIR""/vpn_user"	
}

do_aptUpdate() {
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi
	apt update && apt upgrade -y
	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
	clear
	echo "$REBOOTMSG"; sleep 3
	reboot
}

do_proxy() {
	[[ $proxy -eq 0 ]] && return 0
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi

	touch /etc/apt/apt.conf.d/02proxy
	
cat <<EOF > /etc/apt/apt.conf.d/02proxy
Acquire::http::Proxy "http://10.0.5.1:3142";
APT::Install-Recommends "0";
APT::Install-Suggests "0";
EOF

	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
	
}

do_apt() {
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi

	apt install net-tools build-essential \
	locate nano sudo ifupdown iptables curl resolvconf unzip nmap -y
	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
	
	clear
	echo "$REBOOTMSG"; sleep 5
	reboot
}

do_stuff() {
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi

	cd "$SCRIPTDIR"
	set +e
	crontab -l > "$WRKDIR"/sucron
	echo "@reboot sleep 300; $SCRIPTDIR/theAccountant resNET >> /tmp/cron.sudo.log 2>&1" >> "$WRKDIR"/sucron
	echo "*/1 * * * * /bin/bash $SCRIPTDIR/theAccountant chnIPT >> /tmp/cron.sudo.log 2>&1" >> "$WRKDIR"/sucron
	echo "*/30 * * * * /bin/bash $SCRIPTDIR/theAccountant chkVPN >> /tmp/cron.sudo.log 2>&1" >> "$WRKDIR"/sucron
	crontab "$WRKDIR"/sucron
	rm "$WRKDIR"/sucron

	crontab -l -u "$vpn_user" > "$WRKDIR"/vpncron
	echo "*/1 * * * * /bin/bash $SCRIPTDIR/theAccountant getNFP >> /tmp/cron.vpn.log 2>&1" >> "$WRKDIR"/vpncron
	echo "*/15 6-23 * * * /bin/bash $SCRIPTDIR/theAccountant popDWF >> /tmp/cron.vpn.log 2>&1" >> "$WRKDIR"/vpncron
	crontab -u "$vpn_user" "$WRKDIR"/vpncron
	rm "$WRKDIR"/vpncron
	set -e

	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
}

do_install_deluge() {
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi

	apt install	python python-twisted python-openssl python-setuptools intltool \
	python-xdg python-chardet python-libtorrent python-mako \
	python-pip python-dev -y
	
	cd "$WRKDIR"
	wget -N http://download.deluge-torrent.org/source/"$DELUGE".tar.bz2
	tar xvf "$DELUGE".tar.bz2
	mkdir -p /var/log/deluge
	chown -R "$vpn_user":"$vpn_user" /var/log/deluge
	chmod -R 770 /var/log/deluge
touch /etc/logrotate.d/deluge
cat <<EOF > /etc/logrotate.d/deluge
/var/log/deluge/*.log {
        rotate 4
        weekly
        missingok
        notifempty
        compress
        delaycompress
        sharedscripts
        postrotate
                initctl restart deluged >/dev/null 2>&1 || true
                initctl restart deluge-web >/dev/null 2>&1 || true
        endscript
}
EOF

	echo "Build deluge"
	cd "$DELUGE"
	python setup.py build
	python setup.py install --install-layout=deb
	python setup.py install_data
	
touch /etc/systemd/system/deluged.service
cat <<EOF > /etc/systemd/system/deluged.service
[Unit]
Description=Deluge Bittorrent Client Daemon
After=network-online.target sys-devices-virtual-net-tun0.device
Wants=sys-devices-virtual-net-tun0.device

[Service]
Type=simple
User=$vpn_user
Group=$vpn_user
UMask=007

ExecStart=/usr/bin/deluged -d -l /var/log/deluge/daemon.log -L warning

Restart=on-failure
# Configures the time to wait before service is stopped forcefully.
TimeoutStopSec=300

[Install]
WantedBy=multi-user.target
EOF

if [[ $deluge_web -eq 1 ]];then
touch /etc/systemd/system/deluge-web.service
cat <<EOF > /etc/systemd/system/deluge-web.service
[Unit]
Description=Deluge Bittorrent Client Web Interface
After=network-online.target sys-devices-virtual-net-tun0.device
Wants=sys-devices-virtual-net-tun0.device

[Service]
Type=simple
User=$vpn_user
Group=$vpn_user
UMask=027

ExecStart=/usr/bin/deluge-web -l /var/log/deluge/web.log -L info

Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF
fi

	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
}

do_install_openvpn() {
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi
## ToDo check if script runs again as if new, and stop deluge and openvpn

	apt install libssl-dev liblzo2-dev libpam0g-dev -y
	cd "$WRKDIR"
	wget -N http://build.openvpn.net/downloads/releases/latest/openvpn-latest-stable.tar.gz
	wget -N https://www.privateinternetaccess.com/openvpn/openvpn.zip
	unzip openvpn.zip
	OVPN=`tar --list -f openvpn-latest-stable.tar.gz |head -n1`
	tar xf openvpn-latest-stable.tar.gz
	cd "$OVPN"
	
	./configure --prefix=/usr
	make
	make install
	mkdir -p /run/openvpn/ /etc/openvpn/
	cd "$WRKDIR"/
	cp crl.rsa.2048.pem ca.rsa.2048.crt /etc/openvpn/

	
	touch /etc/openvpn/update-resolv-conf
cat <<EOF > /etc/openvpn/update-resolv-conf
#!/bin/bash
# 
# Parses DHCP options from openvpn to update resolv.conf
# To use set as 'up' and 'down' script in your openvpn *.conf:
# up /etc/openvpn/update-resolv-conf
# down /etc/openvpn/update-resolv-conf
#
# Used snippets of resolvconf script by Thomas Hood and Chris Hanson.
# Licensed under the GNU GPL.  See /usr/share/common-licenses/GPL. 
#
foreign_option_1='dhcp-option DNS 209.222.18.222'
foreign_option_2='dhcp-option DNS 209.222.18.218'
foreign_option_3='dhcp-option DNS 8.8.8.8'

[ -x /sbin/resolvconf ] || exit 0
[ "\$script_type" ] || exit 0
[ "\$dev" ] || exit 0

split_into_parts()
{
	part1="\$1"
	part2="\$2"
	part3="\$3"
}

case "\$script_type" in
  up)
	NMSRVRS=""
	SRCHS=""
	for optionvarname in \${!foreign_option_*} ; do
		option="\${!optionvarname}"
		echo "\$option"
		split_into_parts \$option
		if [ "\$part1" = "dhcp-option" ] ; then
			if [ "\$part2" = "DNS" ] ; then
				NMSRVRS="\${NMSRVRS:+\$NMSRVRS }\$part3"
			elif [ "\$part2" = "DOMAIN" ] ; then
				SRCHS="\${SRCHS:+\$SRCHS }\$part3"
			fi
		fi
	done
	R=""
	[ "\$SRCHS" ] && R="search \$SRCHS"
	for NS in \$NMSRVRS ; do
        	R="\${R}nameserver \$NS"
	done
	echo -n "\$R" | /sbin/resolvconf -a "\${dev}.openvpn"
	;;
  down)
	/sbin/resolvconf -d "\${dev}.openvpn"
	;;
esac
EOF
	chmod +x /etc/openvpn/update-resolv-conf
	
	touch /etc/systemd/system/openvpn@openvpn.service	
cat <<EOF > /etc/systemd/system/openvpn@openvpn.service
[Unit]
# HTPC Guides - www.htpcguides.com
Description=OpenVPN connection to %i
Documentation=man:openvpn(8)
Documentation=https://community.openvpn.net/openvpn/wiki/Openvpn23ManPage
Documentation=https://community.openvpn.net/openvpn/wiki/HOWTO
After=network.target

[Service]
RuntimeDirectory=openvpn
PrivateTmp=true
KillMode=mixed
Type=forking
ExecStart=/usr/sbin/openvpn --daemon ovpn-%i --status /run/openvpn/%i.status 10 --cd /etc/openvpn --script-security 2 --config /etc/openvpn/%i.conf --writepid /run/openvpn/%i.pid
PIDFile=/run/openvpn/%i.pid
ExecReload=/bin/kill -HUP \$MAINPID
WorkingDirectory=/etc/openvpn
Restart=on-failure
RestartSec=3
ProtectSystem=yes
LimitNPROC=10
DeviceAllow=/dev/null rw
DeviceAllow=/dev/net/tun rw

[Install]
WantedBy=multi-user.target
EOF

	touch /etc/openvpn/openvpn.conf
cat <<EOF > /etc/openvpn/openvpn.conf
client
dev tun
proto udp

##
## https://www.privateinternetaccess.com/helpdesk/kb/articles/which-encryption-auth-settings-should-i-use-for-ports-on-your-gateways-2
## A list of portforwarding servers : https://www.privateinternetaccess.com/helpdesk/kb/articles/how-do-i-enable-port-forwarding-on-my-vpn
## This setup is for 1198	UDP	AES-128-CBC	SHA1	ca.rsa.2048.crt	crl.rsa.2048.pem
## Make sure is you change it that every thing changes in here as necessary
## Use this one below for vpn without port forwarding ##
## remote us-california.privateinternetaccess.com 1198
## The one below for port forwarding ##
##
remote ca-toronto.privateinternetaccess.com 1198
resolv-retry infinite
nobind
persist-key
persist-tun
cipher aes-128-cbc
auth sha1
tls-client
remote-cert-tls server
auth-user-pass /etc/openvpn/login.txt
auth-nocache
comp-lzo
verb 1
reneg-sec 0
crl-verify /etc/openvpn/crl.rsa.2048.pem
ca /etc/openvpn/ca.rsa.2048.crt
disable-occ
script-security 2
route-noexec
mute-replay-warnings

#up and down scripts to be executed when VPN starts or stops
up /etc/openvpn/iptables.sh
down /etc/openvpn/update-resolv-conf
EOF

	touch /etc/openvpn/iptables.sh
cat <<EOF > /etc/openvpn/iptables.sh
#! /bin/bash
# Niftiest Software – www.niftiestsoftware.com
# Modified version by HTPC Guides – www.htpcguides.com

export INTERFACE="tun0"
export vpn_user="$vpn_user"
export LOCALIP=\`ifconfig |grep "inet" |grep "cast"| awk '{print \$2}' |tr -dc '0-9.'\`
export NETIF="$ETH"

# flushes all the iptables rules, if you have other rules to use then add them into the script
iptables -F -t nat
iptables -F -t mangle
iptables -F -t filter

# mark packets from "$vpn_user"
iptables -t mangle -A OUTPUT -j CONNMARK --restore-mark
iptables -t mangle -A OUTPUT ! --dest \$LOCALIP -m owner --uid-owner $vpn_user -j MARK --set-mark 0x1
iptables -t mangle -A OUTPUT --dest \$LOCALIP -p udp --dport 53 -m owner --uid-owner $vpn_user -j MARK --set-mark 0x1
iptables -t mangle -A OUTPUT --dest \$LOCALIP -p tcp --dport 53 -m owner --uid-owner $vpn_user -j MARK --set-mark 0x1
iptables -t mangle -A OUTPUT ! --src \$LOCALIP -j MARK --set-mark 0x1
iptables -t mangle -A OUTPUT -j CONNMARK --save-mark

# allow responses
#iptables -A INPUT -i \$INTERFACE -m conntrack --ctstate ESTABLISHED -j ACCEPT
# portforwarding changed line
iptables -A INPUT -i \$INTERFACE -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# block everything incoming on $INTERFACE to prevent accidental exposing of ports
iptables -A INPUT -i \$INTERFACE -j REJECT

# let $vpn_user access lo and $INTERFACE
iptables -A OUTPUT -o lo -m owner --uid-owner \$vpn_user -j ACCEPT
iptables -A OUTPUT -o \$INTERFACE -m owner --uid-owner \$vpn_user -j ACCEPT

# all packets on $INTERFACE needs to be masqueraded
iptables -t nat -A POSTROUTING -o \$INTERFACE -j MASQUERADE

# portforwarding exta line
iptables -A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# reject connections from predator IP going over $NETIF
iptables -A OUTPUT ! --src \$LOCALIP -o \$NETIF -j REJECT

# Start routing script
/etc/openvpn/routing.sh

exit 0
EOF

	chmod +x /etc/openvpn/iptables.sh
	touch /etc/openvpn/routing.sh	
cat <<EOF > /etc/openvpn/routing.sh
#!/bin/bash
# Niftiest Software – www.niftiestsoftware.com
# Modified version by HTPC Guides – www.htpcguides.com

VPNIF="tun0"
vpn_user="$vpn_user"
GATEWAYIP=\$(ifconfig \$VPNIF | egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}' | egrep -v '255|(127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})' | tail -n1)
if [[ \`ip rule list | grep -c 0x1\` == 0 ]]; then
	ip rule add from all fwmark 0x1 lookup \$vpn_user
fi
ip route replace default via \$GATEWAYIP table \$vpn_user
ip route append default via 127.0.0.1 dev lo table \$vpn_user
ip route flush cache

# run update-resolv-conf script to set VPN DNS
/etc/openvpn/update-resolv-conf

exit 0
EOF
	chmod +x /etc/openvpn/routing.sh
	clear
	echo "Create user $vpn_user"
	id -u "$vpn_user" &>/dev/null || adduser --disabled-login "$vpn_user"
	usermod -aG "$vpn_user" "$MYUSER"
	usermod -aG "$MYUSER" "$vpn_user"
	
## Somethimg wrong here
	sudo mv "$EXPORTDIR""/PIA.txt" /etc/openvpn/login.txt
	sudo chmod 600 /etc/openvpn/login.txt
	set +e
	openvpn --version
	set -e
	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
	sleep 5
	clear
}

do_modify_iptables() {
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi
	iptables -F
	iptables -A OUTPUT ! -o lo -m owner --uid-owner "$vpn_user" -j DROP
	clear
	echo "iptables-persistent will now ask you to save the current iptables rules. Accept this with YES"
	sleep 5
	set +e
	PKG_OK=$(dpkg-query -W --showformat='${Status}\n' iptables-persistent|grep "install ok installed")
	set -e
	if [[ "$PKG_OK" ]]; then
		echo "Reconfiguring iptables-persistent"
		dpkg-reconfigure iptables-persistent
	else
		echo "Installing iptables-persistent"
		apt install iptables-persistent -y
	fi
	 
	#http://www.microhowto.info/howto/make_the_configuration_of_iptables_persistent_on_debian.html
	
touch /etc/sysctl.d/9999-vpn.conf
cat <<EOF > /etc/sysctl.d/9999-vpn.conf
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.default.rp_filter = 2
net.ipv4.conf.$ETH.rp_filter = 2
EOF

cat <<EOF >> /etc/iproute2/rt_tables
200     $vpn_user
EOF

	sed -i '/^$/d' /etc/iproute2/rt_tables
	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
	sleep 5
	clear
	echo "$REBOOTMSG"; sleep 3
	reboot
}

do_activate_all() {
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi
	systemctl enable deluged.service
	[[ $deluge_web -eq 1 ]] && systemctl enable deluge-web.service
	systemctl enable openvpn@openvpn.service
	sysctl -p
	sleep 5
	systemctl start openvpn@openvpn.service
	echo ""
	echo "Wait a bit"
	echo ""
	sleep 5
	echo "IP address of the normal user"
	curl ipinfo.io
	echo ""
	echo ""
	echo "IP address of the $vpn_user user"
	echo ""
	echo ""
	sudo -u "$vpn_user" -i -- curl ipinfo.io
	echo ""
	echo ""	
	sleep 10
	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
}

do_install_rclone() {
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi

	[[ `uname -m` =~ "64" ]] && RCLONE="rclone-current-linux-amd64.zip"
	[[ `uname -m` =~ "32" ]] && RCLONE="rclone-current-linux-386.zip"
	[[ `uname -m` =~ "armv7l" ]] && RCLONE="rclone-current-linux-arm.zip"
	[[ `uname -m` =~ "armv8" ]] && RCLONE="rclone-current-linux-arm64.zip"
	
	cd "$WRKDIR"/
	wget -N https://downloads.rclone.org/"$RCLONE"
	unzip -jo "$RCLONE" -d rclone/
	mv rclone/rclone /usr/bin/
	cd
	
	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
	clear
cat <<EOF
Type the following:

sudo su --shell /bin/bash --login $vpn_user

enter password of root user and then type

rclone config

and folow the instructions.
If you have rclone setup and working, change the rclone_fin=0 to rclone_fin=1 in config file in the scripts folder!
You can now safly delete the three downloaded files, as everything is now running out of the scripts folder.
EOF

sleep 20
}

do_config_deluge() {
	
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi
	clear
	echo "If you have any external drives wich need to be formatted or mounted read and answer carefully."
	echo "Nothing will be formatted here, but the script will fail if you have folders in the config which"
	echo "needs to be created and the paths does not exist."
	echo "If you first need to set them up, select NO below."
	echo ""
	while true; do
		read -p "Are you happy to continue? " yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) exit;;
			* ) echo "Please answer yes or no.";;
		esac
	done	
	echo "Getting deluged ready"
	while [ ! -f /home/"$vpn_user"/.config/deluge/auth ]
	do 
		echo "Trying to start deluged"
		systemctl start deluged.service
		sleep 10
	done

	echo "Stopping deluged services"
	systemctl stop deluged.service
	[[ $deluge_web -eq 1 ]] && systemctl stop deluge-web.service
	clear
	echo "$deluge_user:$deluge_pass:10" >> /home/"$vpn_user"/.config/deluge/auth
	echo "$deluge_user:$deluge_pass" "username:password was inserted into deluge."
	sleep 10
	mkdir -p "$root_torrent_dir"
	
## Todo Check non existing here if fail
	
	mkdir -p "$root_torrent_dir$busy_torrent_dir" "$root_torrent_dir$completed_torrent_dir" "$root_torrent_dir$watching_torrent_dir" "$root_torrent_dir$used_torrent_dir"
	mkdir -p "$root_torrent_dir$completed_torrent_dir$completed_torrent_subdir1" "$root_torrent_dir$completed_torrent_dir$completed_torrent_subdir2" "$root_torrent_dir$completed_torrent_dir$completed_torrent_subdir3"

	chown -R "$vpn_user":"$vpn_user" "$root_torrent_dir"
	chmod -R 777 "$root_torrent_dir"
	echo "Starting deluged services"
	systemctl start deluged.service
	[[ $deluge_web -eq 1 ]] && systemctl start deluge-web.service
	
sudo -u "$vpn_user" -i -- << EOF

deluge-console "config -s lsd false"
deluge-console "config -s move_completed_path $root_torrent_dir$completed_torrent_dir"
deluge-console "config -s download_location $root_torrent_dir$busy_torrent_dir"
deluge-console "config -s torrentfiles_location $root_torrent_dir$used_torrent_dir"
deluge-console "config -s autoadd_location $root_torrent_dir$watching_torrent_dir"
deluge-console "config -s queue_new_to_top true"
deluge-console "config -s natpmp false"
deluge-console "config -s max_active_limit 999"
deluge-console "config -s utpex false"
deluge-console "config -s max_active_downloading 5"
deluge-console "config -s max_active_seeding -1"

deluge-console "config -s enc_level 1"
deluge-console "config -s dont_count_slow_torrents true"
deluge-console "config -s max_upload_slots_per_torrent 10"
deluge-console "config -s new_release_check false"
deluge-console "config -s seed_time_limit -1"
deluge-console "config -s share_ratio_limit 5.0"

deluge-console "config -s upnp false"
deluge-console "config -s max_upload_slots_global -1"
#deluge-console "config -s enabled_plugins [ Scheduler, Label ]"
deluge-console "config -s random_port false"
deluge-console "config -s autoadd_enable true"
deluge-console "config -s dht false"
deluge-console "config -s stop_seed_ratio 1"
deluge-console "config -s seed_time_ratio_limit -1.0"
deluge-console "config -s copy_torrent_file true"
deluge-console "config -s move_completed true"
deluge-console "config -s autoadd_location $root_torrent_dir$watching_torrent_dir"
EOF
	echo ""
	sleep 5
	while true; do
		read -p "Do you want to get a legal torrent and start downloading it? " yn
		case $yn in
			[Yy]* ) echo "Trying to get the latest raspberrypi lite torrent and starting deluge download."
sudo -u "$vpn_user" -i -- << EOF
wget "https://downloads.raspberrypi.org/raspbian_lite_latest.torrent" -O t.t && deluge-console "add t.t"
EOF
					sleep 10
					clear
					break
					;;
			[Nn]* ) break;;
			* ) echo "Please answer yes or no.";;
		esac
	done
	
	if [ $? -eq 0 ]; then
        touch "$PROGRESS"$1
	fi
}

do_activate_theAccountant() {
	if [ -e "$PROGRESS"$1 ];then
		return 0
	fi
	
	echo "Activating theAccountant"
	chmod 755 ${SCRIPTDIR}/theAccountant
	sed -i '7,8d' ${SCRIPTDIR}/theAccountant

	
	if [ $? -eq 0 ]; then
		touch "$PROGRESS"$1
	fi
}
if [ `id -u` != "0" ]; then
        echo "Sorry, you are not root."
        exit
fi

do_setup_variables
set -e
do_check_config 0
do_proxy 1
do_aptUpdate 2
do_apt 3
do_install_openvpn 4
do_install_deluge 5
do_modify_iptables 6
do_activate_all 7
do_stuff 8
do_config_deluge 9
do_activate_theAccountant 10
[[ $rclone -eq 1 ]] && do_install_rclone 11
clear
/bin/bash "$SCRIPTDIR"/theAccountant resNET
sleep 20
echo "Done, enjoy..."
echo ""
echo "To see if your box is working fine do the following."
echo "Type:"
echo "  sudo su --shell /bin/bash --login $vpn_user"
echo "Then type:"
echo "  ssh -fNL 58888:localhost:58846 $MYUSER@$HOSTNAME"
echo "Accept the fingerprint and enter password."
echo "When all is good, press CTRL D twice to get out of box."
echo "Then from you own machine type:"
echo "Replace the last 'test' with your own i.e. john@10.0.0.5"
echo "  ssh -L 127.0.0.2:58846:localhost:58888 test"
echo "Enter your password to ssh to the new box."
echo "Leave the session open and start the deluge client on your own machine."
echo "  Now add a new connection:"
echo "  Hostname: 127.0.0.2"
echo "  Username: alice"
echo "  Password: MyC0mpL3xPass"
echo "Read here to change deluge's password: https://dev.deluge-torrent.org/wiki/UserGuide/ThinClient"
